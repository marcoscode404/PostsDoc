{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\marcosgomes\\\\Desktop\\\\outrosProjetos\\\\PostsDoc\\\\src\\\\pages\\\\index.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable prettier/prettier */\n\n/* eslint-disable no-param-reassign */\n\n/* eslint-disable no-return-assign */\n\n/* eslint-disable react/no-danger */\nimport Head from 'next/head';\nimport { FiCalendar, FiClock, FiUser } from 'react-icons/fi';\nimport Prismic from '@prismicio/client';\nimport { format } from 'date-fns';\nimport { ptBR } from 'date-fns/locale';\nimport Link from 'next/link';\nimport { useState } from 'react';\nimport { getPrismicClient } from '../services/prismic';\nimport commonStyles from '../styles/common.module.scss';\nimport styles from './home.module.scss';\nimport Header from '../components/Header';\nimport Slides from '../components/sliders';\nimport Footer from '../components/Footer';\nexport default function Home({\n  postsPagination,\n  preview\n}) {\n  function getReadTime(item) {\n    const totalWords = item.data.content.reduce((total, contentItem) => {\n      total += contentItem.heading.split(' ').length;\n      const words = contentItem.body.map(i => i.text.split(' ').length);\n      words.map(word => total += word);\n      return total;\n    }, 0);\n    return Math.ceil(totalWords / 200);\n  }\n\n  const formattedPost = postsPagination.results.map(post => {\n    const readTime = getReadTime(post);\n    return _objectSpread(_objectSpread({}, post), {}, {\n      data: _objectSpread(_objectSpread({}, post.data), {}, {\n        readTime\n      }),\n      first_publication_date: format(new Date(post.first_publication_date), 'dd MMM yyyy', {\n        locale: ptBR\n      })\n    });\n  });\n  const {\n    0: posts,\n    1: setPosts\n  } = useState(formattedPost);\n  const {\n    0: nextPage,\n    1: setNextPage\n  } = useState(postsPagination.next_page);\n  const {\n    0: currentPage,\n    1: setCurrentPage\n  } = useState(1);\n\n  async function handleNextPage() {\n    if (currentPage !== 1 && nextPage === null) {\n      return;\n    }\n\n    const postsResults = await fetch(`${nextPage}`).then(response => response.json());\n    setNextPage(postsResults.next_page);\n    setCurrentPage(postsResults.page);\n    const newPosts = postsResults.results.map(post => {\n      const readTime = getReadTime(post);\n      return {\n        uid: post.uid,\n        first_publication_date: format(new Date(post.first_publication_date), 'dd MMM yyyy', {\n          locale: ptBR\n        }),\n        data: {\n          title: post.data.title,\n          subtitle: post.data.subtitle,\n          author: post.data.author,\n          banner: {\n            url: post.data.banner.url\n          },\n          readTime\n        }\n      };\n    }); // pega os itens do array, faz uma copia do que já tem e cria uma nova lista\n    // só adicionando o novo post, sem precisar recarregar a list de post do zero\n\n    setPosts([...posts, ...newPosts]);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: /*#__PURE__*/_jsxDEV(\"title\", {\n        children: \"Home | ColabDevs\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: commonStyles.container,\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Slides, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.posts,\n        children: [posts.map(post => /*#__PURE__*/_jsxDEV(Link, {\n          href: `/post/${post.uid}`,\n          children: /*#__PURE__*/_jsxDEV(\"a\", {\n            className: styles.post,\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: post.data.banner.url,\n              className: styles.image,\n              alt: \"imagensPosts\"\n            }, post.uid, false, {\n              fileName: _jsxFileName,\n              lineNumber: 150,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: styles.titlePosts,\n              children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                children: post.data.title\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 153,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 152,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: styles.titlePosts,\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: post.data.subtitle\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 157,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n                children: [/*#__PURE__*/_jsxDEV(\"li\", {\n                  children: [/*#__PURE__*/_jsxDEV(FiCalendar, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 160,\n                    columnNumber: 25\n                  }, this), post.first_publication_date]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 159,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                  children: [/*#__PURE__*/_jsxDEV(FiUser, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 164,\n                    columnNumber: 25\n                  }, this), post.data.author]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 163,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                  children: [/*#__PURE__*/_jsxDEV(FiClock, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 168,\n                    columnNumber: 25\n                  }, this), `${post.data.readTime} min`]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 167,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 158,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 156,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 17\n          }, this)\n        }, post.uid, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 15\n        }, this)), nextPage && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: styles.ButtonPosts,\n          type: \"button\",\n          onClick: handleNextPage,\n          children: \"Carregar mais posts ...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 11\n      }, this), preview && /*#__PURE__*/_jsxDEV(\"aside\", {\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          href: \"/api/exit-preview\",\n          children: /*#__PURE__*/_jsxDEV(\"a\", {\n            className: commonStyles.preview,\n            children: \"Sair do modo Preview\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\nexport const getStaticProps = async ({\n  preview = false\n}) => {\n  const prismic = getPrismicClient();\n  const postsResponse = await prismic.query([Prismic.Predicates.at('document.type', 'posts')], {\n    pageSize: 3,\n    orderings: '[document.last_publication_date desc]'\n  });\n  const posts = postsResponse.results.map(post => {\n    return {\n      uid: post.uid,\n      first_publication_date: post.first_publication_date,\n      data: {\n        title: post.data.title,\n        subtitle: post.data.subtitle,\n        author: post.data.author,\n        banner: {\n          url: post.data.banner.url\n        },\n        content: post.data.content.map(content => {\n          return {\n            heading: content.heading,\n            body: [...content.body]\n          };\n        })\n      }\n    };\n  });\n  const postsPagination = {\n    next_page: postsResponse.next_page,\n    results: posts\n  };\n  return {\n    props: {\n      postsPagination,\n      preview\n    },\n    revalidate: 1800\n  };\n};","map":{"version":3,"sources":["C:/Users/marcosgomes/Desktop/outrosProjetos/PostsDoc/src/pages/index.tsx"],"names":["Head","FiCalendar","FiClock","FiUser","Prismic","format","ptBR","Link","useState","getPrismicClient","commonStyles","styles","Header","Slides","Footer","Home","postsPagination","preview","getReadTime","item","totalWords","data","content","reduce","total","contentItem","heading","split","length","words","body","map","i","text","word","Math","ceil","formattedPost","results","post","readTime","first_publication_date","Date","locale","posts","setPosts","nextPage","setNextPage","next_page","currentPage","setCurrentPage","handleNextPage","postsResults","fetch","then","response","json","page","newPosts","uid","title","subtitle","author","banner","url","container","image","titlePosts","ButtonPosts","getStaticProps","prismic","postsResponse","query","Predicates","at","pageSize","orderings","props","revalidate"],"mappings":";;;;;;;;;;AAAA;;AACA;;AACA;;AACA;AAEA,OAAOA,IAAP,MAAiB,WAAjB;AACA,SAASC,UAAT,EAAqBC,OAArB,EAA8BC,MAA9B,QAA4C,gBAA5C;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,SAASC,MAAT,QAAuB,UAAvB;AACA,SAASC,IAAT,QAAqB,iBAArB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAAuBC,QAAvB,QAAuC,OAAvC;AACA,SAASC,gBAAT,QAAiC,qBAAjC;AAEA,OAAOC,YAAP,MAAyB,8BAAzB;AACA,OAAOC,MAAP,MAAmB,oBAAnB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,MAAP,MAAmB,uBAAnB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AAmCA,eAAe,SAASC,IAAT,CAAc;AAC3BC,EAAAA,eAD2B;AAE3BC,EAAAA;AAF2B,CAAd,EAGa;AAC1B,WAASC,WAAT,CAAqBC,IAArB,EAAyC;AACvC,UAAMC,UAAU,GAAGD,IAAI,CAACE,IAAL,CAAUC,OAAV,CAAkBC,MAAlB,CAAyB,CAACC,KAAD,EAAQC,WAAR,KAAwB;AAClED,MAAAA,KAAK,IAAIC,WAAW,CAACC,OAAZ,CAAoBC,KAApB,CAA0B,GAA1B,EAA+BC,MAAxC;AAEA,YAAMC,KAAK,GAAGJ,WAAW,CAACK,IAAZ,CAAiBC,GAAjB,CAAqBC,CAAC,IAAIA,CAAC,CAACC,IAAF,CAAON,KAAP,CAAa,GAAb,EAAkBC,MAA5C,CAAd;AACAC,MAAAA,KAAK,CAACE,GAAN,CAAUG,IAAI,IAAKV,KAAK,IAAIU,IAA5B;AACA,aAAOV,KAAP;AACD,KANkB,EAMhB,CANgB,CAAnB;AAOA,WAAOW,IAAI,CAACC,IAAL,CAAUhB,UAAU,GAAG,GAAvB,CAAP;AACD;;AAED,QAAMiB,aAAa,GAAGrB,eAAe,CAACsB,OAAhB,CAAwBP,GAAxB,CAA4BQ,IAAI,IAAI;AACxD,UAAMC,QAAQ,GAAGtB,WAAW,CAACqB,IAAD,CAA5B;AAEA,2CACKA,IADL;AAEElB,MAAAA,IAAI,kCACCkB,IAAI,CAAClB,IADN;AAEFmB,QAAAA;AAFE,QAFN;AAMEC,MAAAA,sBAAsB,EAAEpC,MAAM,CAC5B,IAAIqC,IAAJ,CAASH,IAAI,CAACE,sBAAd,CAD4B,EAE5B,aAF4B,EAG5B;AACEE,QAAAA,MAAM,EAAErC;AADV,OAH4B;AANhC;AAcD,GAjBqB,CAAtB;AAmBA,QAAM;AAAA,OAACsC,KAAD;AAAA,OAAQC;AAAR,MAAoBrC,QAAQ,CAAS6B,aAAT,CAAlC;AACA,QAAM;AAAA,OAACS,QAAD;AAAA,OAAWC;AAAX,MAA0BvC,QAAQ,CAACQ,eAAe,CAACgC,SAAjB,CAAxC;AACA,QAAM;AAAA,OAACC,WAAD;AAAA,OAAcC;AAAd,MAAgC1C,QAAQ,CAAC,CAAD,CAA9C;;AAEA,iBAAe2C,cAAf,GAA+C;AAC7C,QAAIF,WAAW,KAAK,CAAhB,IAAqBH,QAAQ,KAAK,IAAtC,EAA4C;AAC1C;AACD;;AAED,UAAMM,YAAY,GAAG,MAAMC,KAAK,CAAE,GAAEP,QAAS,EAAb,CAAL,CAAqBQ,IAArB,CAA0BC,QAAQ,IAC3DA,QAAQ,CAACC,IAAT,EADyB,CAA3B;AAGAT,IAAAA,WAAW,CAACK,YAAY,CAACJ,SAAd,CAAX;AACAE,IAAAA,cAAc,CAACE,YAAY,CAACK,IAAd,CAAd;AAEA,UAAMC,QAAQ,GAAGN,YAAY,CAACd,OAAb,CAAqBP,GAArB,CAA0BQ,IAAD,IAAgB;AACxD,YAAMC,QAAQ,GAAGtB,WAAW,CAACqB,IAAD,CAA5B;AAEA,aAAO;AACLoB,QAAAA,GAAG,EAAEpB,IAAI,CAACoB,GADL;AAELlB,QAAAA,sBAAsB,EAAEpC,MAAM,CAC5B,IAAIqC,IAAJ,CAASH,IAAI,CAACE,sBAAd,CAD4B,EAE5B,aAF4B,EAG5B;AACEE,UAAAA,MAAM,EAAErC;AADV,SAH4B,CAFzB;AASLe,QAAAA,IAAI,EAAE;AACJuC,UAAAA,KAAK,EAAErB,IAAI,CAAClB,IAAL,CAAUuC,KADb;AAEJC,UAAAA,QAAQ,EAAEtB,IAAI,CAAClB,IAAL,CAAUwC,QAFhB;AAGJC,UAAAA,MAAM,EAAEvB,IAAI,CAAClB,IAAL,CAAUyC,MAHd;AAIJC,UAAAA,MAAM,EAAE;AACNC,YAAAA,GAAG,EAAEzB,IAAI,CAAClB,IAAL,CAAU0C,MAAV,CAAiBC;AADhB,WAJJ;AAOJxB,UAAAA;AAPI;AATD,OAAP;AAmBD,KAtBgB,CAAjB,CAX6C,CAmC7C;AACA;;AACAK,IAAAA,QAAQ,CAAC,CAAC,GAAGD,KAAJ,EAAW,GAAGc,QAAd,CAAD,CAAR;AACD;;AAED,sBACE;AAAA,4BACE,QAAC,IAAD;AAAA,6BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,eAKE;AAAM,MAAA,SAAS,EAAEhD,YAAY,CAACuD,SAA9B;AAAA,8BAEE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,cAFF,eAKE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,cALF,eAOI;AAAK,QAAA,SAAS,EAAEtD,MAAM,CAACiC,KAAvB;AAAA,mBAEGA,KAAK,CAACb,GAAN,CAAUQ,IAAI,iBACb,QAAC,IAAD;AAAM,UAAA,IAAI,EAAG,SAAQA,IAAI,CAACoB,GAAI,EAA9B;AAAA,iCACE;AAAG,YAAA,SAAS,EAAEhD,MAAM,CAAC4B,IAArB;AAAA,oCACE;AAAK,cAAA,GAAG,EAAEA,IAAI,CAAClB,IAAL,CAAU0C,MAAV,CAAiBC,GAA3B;AAAgD,cAAA,SAAS,EAAErD,MAAM,CAACuD,KAAlE;AAAyE,cAAA,GAAG,EAAC;AAA7E,eAAqC3B,IAAI,CAACoB,GAA1C;AAAA;AAAA;AAAA;AAAA,oBADF,eAGE;AAAK,cAAA,SAAS,EAAEhD,MAAM,CAACwD,UAAvB;AAAA,qCACE;AAAA,0BAAS5B,IAAI,CAAClB,IAAL,CAAUuC;AAAnB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,oBAHF,eAOE;AAAK,cAAA,SAAS,EAAEjD,MAAM,CAACwD,UAAvB;AAAA,sCACE;AAAA,0BAAI5B,IAAI,CAAClB,IAAL,CAAUwC;AAAd;AAAA;AAAA;AAAA;AAAA,sBADF,eAEE;AAAA,wCACE;AAAA,0CACE,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA,0BADF,EAEGtB,IAAI,CAACE,sBAFR;AAAA;AAAA;AAAA;AAAA;AAAA,wBADF,eAKE;AAAA,0CACE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,0BADF,EAEGF,IAAI,CAAClB,IAAL,CAAUyC,MAFb;AAAA;AAAA;AAAA;AAAA;AAAA,wBALF,eASE;AAAA,0CACE,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,0BADF,EAEI,GAAEvB,IAAI,CAAClB,IAAL,CAAUmB,QAAS,MAFzB;AAAA;AAAA;AAAA;AAAA;AAAA,wBATF;AAAA;AAAA;AAAA;AAAA;AAAA,sBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,oBAPF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF,WAAsCD,IAAI,CAACoB,GAA3C;AAAA;AAAA;AAAA;AAAA,gBADD,CAFH,EAkCGb,QAAQ,iBACP;AAAQ,UAAA,SAAS,EAAEnC,MAAM,CAACyD,WAA1B;AAAuC,UAAA,IAAI,EAAC,QAA5C;AAAqD,UAAA,OAAO,EAAEjB,cAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAnCJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAPJ,EAgDGlC,OAAO,iBACN;AAAA,+BACE,QAAC,IAAD;AAAM,UAAA,IAAI,EAAC,mBAAX;AAAA,iCACE;AAAG,YAAA,SAAS,EAAEP,YAAY,CAACO,OAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAjDJ,eAyDE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,cAzDF;AAAA;AAAA;AAAA;AAAA;AAAA,YALF;AAAA,kBADF;AAoED;AAED,OAAO,MAAMoD,cAA8B,GAAG,OAAO;AAAEpD,EAAAA,OAAO,GAAG;AAAZ,CAAP,KAA+B;AAC3E,QAAMqD,OAAO,GAAG7D,gBAAgB,EAAhC;AAEA,QAAM8D,aAAa,GAAG,MAAMD,OAAO,CAACE,KAAR,CAC1B,CAACpE,OAAO,CAACqE,UAAR,CAAmBC,EAAnB,CAAsB,eAAtB,EAAuC,OAAvC,CAAD,CAD0B,EAE1B;AACEC,IAAAA,QAAQ,EAAE,CADZ;AAEEC,IAAAA,SAAS,EAAE;AAFb,GAF0B,CAA5B;AAQA,QAAMhC,KAAK,GAAG2B,aAAa,CAACjC,OAAd,CAAsBP,GAAtB,CAA0BQ,IAAI,IAAI;AAC9C,WAAO;AACLoB,MAAAA,GAAG,EAAEpB,IAAI,CAACoB,GADL;AAELlB,MAAAA,sBAAsB,EAAEF,IAAI,CAACE,sBAFxB;AAGLpB,MAAAA,IAAI,EAAE;AACJuC,QAAAA,KAAK,EAAErB,IAAI,CAAClB,IAAL,CAAUuC,KADb;AAEJC,QAAAA,QAAQ,EAAEtB,IAAI,CAAClB,IAAL,CAAUwC,QAFhB;AAGJC,QAAAA,MAAM,EAAEvB,IAAI,CAAClB,IAAL,CAAUyC,MAHd;AAIJC,QAAAA,MAAM,EAAE;AACNC,UAAAA,GAAG,EAAEzB,IAAI,CAAClB,IAAL,CAAU0C,MAAV,CAAiBC;AADhB,SAJJ;AAOJ1C,QAAAA,OAAO,EAAEiB,IAAI,CAAClB,IAAL,CAAUC,OAAV,CAAkBS,GAAlB,CAAsBT,OAAO,IAAI;AACxC,iBAAO;AACLI,YAAAA,OAAO,EAAEJ,OAAO,CAACI,OADZ;AAELI,YAAAA,IAAI,EAAE,CAAC,GAAGR,OAAO,CAACQ,IAAZ;AAFD,WAAP;AAID,SALQ;AAPL;AAHD,KAAP;AAkBD,GAnBa,CAAd;AAqBA,QAAMd,eAAe,GAAG;AACtBgC,IAAAA,SAAS,EAAEuB,aAAa,CAACvB,SADH;AAEtBV,IAAAA,OAAO,EAAEM;AAFa,GAAxB;AAKA,SAAO;AACLiC,IAAAA,KAAK,EAAE;AACL7D,MAAAA,eADK;AAELC,MAAAA;AAFK,KADF;AAKL6D,IAAAA,UAAU,EAAE;AALP,GAAP;AAOD,CA5CM","sourcesContent":["/* eslint-disable prettier/prettier */\r\n/* eslint-disable no-param-reassign */\r\n/* eslint-disable no-return-assign */\r\n/* eslint-disable react/no-danger */\r\nimport { GetStaticProps } from 'next';\r\nimport Head from 'next/head';\r\nimport { FiCalendar, FiClock, FiUser } from 'react-icons/fi';\r\nimport Prismic from '@prismicio/client';\r\nimport { format } from 'date-fns';\r\nimport { ptBR } from 'date-fns/locale';\r\nimport Link from 'next/link';\r\nimport { ReactElement, useState } from 'react';\r\nimport { getPrismicClient } from '../services/prismic';\r\n\r\nimport commonStyles from '../styles/common.module.scss';\r\nimport styles from './home.module.scss';\r\nimport Header from '../components/Header';\r\nimport Slides from '../components/sliders';\r\nimport Footer from '../components/Footer';\r\n\r\ninterface Post {\r\n  uid?: string;\r\n  first_publication_date: string | null;\r\n  data: {\r\n    title: string;\r\n    banner: {\r\n      url: string;\r\n    };\r\n    subtitle: string;\r\n    author: string;\r\n    readTime: number;\r\n    content: {\r\n      heading: string;\r\n      body: {\r\n        text: string;\r\n      }[];\r\n    }[];\r\n  };\r\n}\r\n\r\ninterface PostPagination {\r\n  next_page: string;\r\n  results: Post[];\r\n  banner: {\r\n    url: string;\r\n  };\r\n}\r\n\r\ninterface HomeProps {\r\n  postsPagination: PostPagination;\r\n  preview: boolean;\r\n}\r\n\r\nexport default function Home({\r\n  postsPagination,\r\n  preview,\r\n}: HomeProps): ReactElement {\r\n  function getReadTime(item: Post): number {\r\n    const totalWords = item.data.content.reduce((total, contentItem) => {\r\n      total += contentItem.heading.split(' ').length;\r\n\r\n      const words = contentItem.body.map(i => i.text.split(' ').length);\r\n      words.map(word => (total += word));\r\n      return total;\r\n    }, 0);\r\n    return Math.ceil(totalWords / 200);\r\n  }\r\n\r\n  const formattedPost = postsPagination.results.map(post => {\r\n    const readTime = getReadTime(post);\r\n\r\n    return {\r\n      ...post,\r\n      data: {\r\n        ...post.data,\r\n        readTime,\r\n      },\r\n      first_publication_date: format(\r\n        new Date(post.first_publication_date),\r\n        'dd MMM yyyy',\r\n        {\r\n          locale: ptBR,\r\n        }\r\n      ),\r\n    };\r\n  });\r\n\r\n  const [posts, setPosts] = useState<Post[]>(formattedPost);\r\n  const [nextPage, setNextPage] = useState(postsPagination.next_page);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n\r\n  async function handleNextPage(): Promise<void> {\r\n    if (currentPage !== 1 && nextPage === null) {\r\n      return;\r\n    }\r\n\r\n    const postsResults = await fetch(`${nextPage}`).then(response =>\r\n      response.json()\r\n    );\r\n    setNextPage(postsResults.next_page);\r\n    setCurrentPage(postsResults.page);\r\n\r\n    const newPosts = postsResults.results.map((post: Post) => {\r\n      const readTime = getReadTime(post);\r\n\r\n      return {\r\n        uid: post.uid,\r\n        first_publication_date: format(\r\n          new Date(post.first_publication_date),\r\n          'dd MMM yyyy',\r\n          {\r\n            locale: ptBR,\r\n          }\r\n        ),\r\n        data: {\r\n          title: post.data.title,\r\n          subtitle: post.data.subtitle,\r\n          author: post.data.author,\r\n          banner: {\r\n            url: post.data.banner.url,\r\n          },\r\n          readTime,\r\n        },\r\n      };\r\n    });\r\n\r\n    // pega os itens do array, faz uma copia do que já tem e cria uma nova lista\r\n    // só adicionando o novo post, sem precisar recarregar a list de post do zero\r\n    setPosts([...posts, ...newPosts]);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Head>\r\n        <title>Home | ColabDevs</title>\r\n      </Head>\r\n\r\n      <main className={commonStyles.container}>\r\n        {/* componente Header */}\r\n        <Header />\r\n\r\n        {/* componente de Sliders */}\r\n        <Slides />\r\n\r\n          <div className={styles.posts}>\r\n\r\n            {posts.map(post => (\r\n              <Link href={`/post/${post.uid}`} key={post.uid}>\r\n                <a className={styles.post}>\r\n                  <img src={post.data.banner.url} key={post.uid}  className={styles.image} alt=\"imagensPosts\"/>\r\n\r\n                  <div className={styles.titlePosts}>\r\n                    <strong>{post.data.title}</strong>\r\n                  </div>\r\n\r\n                  <div className={styles.titlePosts}>\r\n                    <p>{post.data.subtitle}</p>\r\n                    <ul>\r\n                      <li>\r\n                        <FiCalendar />\r\n                        {post.first_publication_date}\r\n                      </li>\r\n                      <li>\r\n                        <FiUser />\r\n                        {post.data.author}\r\n                      </li>\r\n                      <li>\r\n                        <FiClock />\r\n                        {`${post.data.readTime} min`}\r\n                      </li>\r\n                    </ul>\r\n                  </div>\r\n                </a>\r\n              </Link>\r\n            ))\r\n            }\r\n\r\n              {/* botao de carregar novos posts */}\r\n            {nextPage && (\r\n              <button className={styles.ButtonPosts} type=\"button\" onClick={handleNextPage}>\r\n                Carregar mais posts ...\r\n              </button>\r\n            )}\r\n          </div>\r\n\r\n        {preview && (\r\n          <aside>\r\n            <Link href=\"/api/exit-preview\">\r\n              <a className={commonStyles.preview}>Sair do modo Preview</a>\r\n            </Link>\r\n          </aside>\r\n        )}\r\n\r\n        {/* Footer */}\r\n        <Footer />\r\n      </main>\r\n\r\n    </>\r\n  );\r\n}\r\n\r\nexport const getStaticProps: GetStaticProps = async ({ preview = false }) => {\r\n  const prismic = getPrismicClient();\r\n\r\n  const postsResponse = await prismic.query(\r\n    [Prismic.Predicates.at('document.type', 'posts')],\r\n    {\r\n      pageSize: 3,\r\n      orderings: '[document.last_publication_date desc]',\r\n    }\r\n  );\r\n\r\n  const posts = postsResponse.results.map(post => {\r\n    return {\r\n      uid: post.uid,\r\n      first_publication_date: post.first_publication_date,\r\n      data: {\r\n        title: post.data.title,\r\n        subtitle: post.data.subtitle,\r\n        author: post.data.author,\r\n        banner: {\r\n          url: post.data.banner.url,\r\n        },\r\n        content: post.data.content.map(content => {\r\n          return {\r\n            heading: content.heading,\r\n            body: [...content.body],\r\n          };\r\n        }),\r\n      },\r\n    };\r\n  });\r\n\r\n  const postsPagination = {\r\n    next_page: postsResponse.next_page,\r\n    results: posts,\r\n  };\r\n\r\n  return {\r\n    props: {\r\n      postsPagination,\r\n      preview,\r\n    },\r\n    revalidate: 1800,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}